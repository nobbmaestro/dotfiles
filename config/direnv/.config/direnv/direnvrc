# Layout Poetry taken from accordingly
# https://github.com/direnv/direnv/wiki/Python#poetry

layout_poetry() {
    PYPROJECT_TOML="${PYPROJECT_TOML:-pyproject.toml}"
    if [[ ! -f "$PYPROJECT_TOML" ]]; then
        log_status "No pyproject.toml found. Executing \`poetry init\` to create a \`$PYPROJECT_TOML\` first."
        poetry init
    fi

    if [[ -d ".venv" ]]; then
        VIRTUAL_ENV="$(pwd)/.venv"
    else
        VIRTUAL_ENV=$(poetry env info --path 2>/dev/null ; true)
    fi

    if [[ -z $VIRTUAL_ENV || ! -d $VIRTUAL_ENV ]]; then
        log_status "No virtual environment exists. Executing \`poetry install\` to create one."
        poetry install
        VIRTUAL_ENV=$(poetry env info --path)
    fi

    PATH_add "$VIRTUAL_ENV/bin"
    export POETRY_ACTIVE=1  # or VENV_ACTIVE=1
    export VIRTUAL_ENV
}

layout_nvm() {
    if [ -f $NVM_DIR/nvm.sh ]; then
        type nvm >/dev/null 2>&1 || . $NVM_DIR/nvm.sh
        nvm use $(< .nvmrc)
    fi
}

layout_python_uv() {
  local python=${1:-python}
  [[ $# -gt 0 ]] && shift
  unset PYTHONHOME

  local python_version
  python_version="$($python -V | cut -w -f 2 | cut -d . -f 1-2)"
  if [[ -z $python_version ]]; then
      log_error "Could not find python's version"
      return 1
  fi

  if [[ -n "${VIRTUAL_ENV:-}" ]]; then
      local REPLY
      realpath.absolute "$VIRTUAL_ENV"
      VIRTUAL_ENV=$REPLY
  else
      # put the venv in the project root
      VIRTUAL_ENV="$PWD/.venv"
  fi

  if [[ ! -d "$VIRTUAL_ENV" ]]; then
      # create the venv at .venv using uv
      uv venv -p "$python" "$@" "$VIRTUAL_ENV"
      # (equivalently: (cd "$PWD" && uv venv -p "$python"))
  fi

  export VIRTUAL_ENV
  PATH_add "$VIRTUAL_ENV/bin"
}
