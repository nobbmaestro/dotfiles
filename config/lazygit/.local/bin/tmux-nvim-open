#!/bin/bash
#
# tmux-nvim-open
#
# This script opens the given file in existing NeoVim instance. If current
# Tmux session does not contain NeoVim instance, it will create a new pane
# and run NeoVim.

get_pane_info() {
    tmux list-panes -s -F "#{pane_id} #{window_id} #{pane_current_command}"
}

get_pane_id_by_command() {
    cmd_name=$1
    pane_id=$(get_pane_info |
        awk -v cmd_name="$cmd_name" '$3 == cmd_name { print $1; exit }')
    echo "$pane_id"
}

get_window_id_by_command() {
    cmd_name=$1
    window_id=$(get_pane_info |
        awk -v cmd_name="$cmd_name" '$3 == cmd_name { print $2; exit }')
    echo "$window_id"
}

if [ -z "$1" ]; then
    echo "Usage: $0 <file> [line]"
    exit 1
fi

file_to_edit="$1"
line="${2:-1}"

if [[ -n "$NVIM" ]]; then
    # If in a Neovim terminal, open the file in the current nvim instance
    nvim --server "${NVIM}" --remote-send "<C-w>:e +${line} ${file_to_edit}<CR>"
    exit 0
fi

if [ -z "$TMUX" ]; then
    # If not in a tmux session, open the file in a new Neovim instance
    nvim +$\line -- "$file_to_edit"
    exit 0
fi

nvim_pane_id=$(get_pane_id_by_command nvim)
nvim_window_id=$(get_window_id_by_command nvim)

if [ -z "$nvim_pane_id" ]; then
    tmux new-window -n "nvim" "nvim +${line} -- ${file_to_edit}"
else
    tmux select-window -t "$nvim_window_id"
    tmux select-pane -t "$nvim_pane_id"
    tmux send-keys ":edit +${line} ${file_to_edit}" Enter
fi
